/**
 * =============================================================================
 * EXPORTACIÓN PDF - FUNCIONALIDADES CORREGIDAS
 * Generación de PDF con formato profesional y logo ACH auténtico
 * =============================================================================
 */

// Función de respaldo para mostrar mensajes si no está definida
if (typeof mostrarMensaje === 'undefined') {
  window.mostrarMensaje = function(mensaje, tipo) {
    if (tipo === 'error') {
      alert('Error: ' + mensaje);
    } else {
      alert(mensaje);
    }
  };
}

// =============================================================================
// UTILIDAD: ESPERAR CARGA DE IMÁGENES
// =============================================================================
function waitForImages(root) {
  const imgs = Array.from((root || document).querySelectorAll('img'));
  if (!imgs.length) return Promise.resolve();
  
  return Promise.all(
    imgs.map(img => {
      if (img.complete && img.naturalWidth) return Promise.resolve();
      return new Promise(res => {
        img.onload = () => res();
        img.onerror = () => res();
      });
    })
  );
}

// =============================================================================
// UTILIDAD: CONVERTIR IMAGEN A BASE64 DESDE ELEMENTO
// =============================================================================
function convertImageToBase64FromElement(imgElement) {
  return new Promise((resolve, reject) => {
    try {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      canvas.width = imgElement.naturalWidth || imgElement.width;
      canvas.height = imgElement.naturalHeight || imgElement.height;
      
      ctx.drawImage(imgElement, 0, 0);
      const dataURL = canvas.toDataURL('image/png');
      resolve(dataURL);
    } catch (error) {
      console.error('Error convirtiendo imagen:', error);
      reject(error);
    }
  });
}

// =============================================================================
// CREAR LOGO ACH SVG
// =============================================================================
function crearLogoACH_SVG() {
  return `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="400px" height="150px" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1300 500">

<!-- PATRÓN DE PUNTOS AZULES (usando el diseño original) -->
<g><path style="opacity:0.985" fill="#115da8" d="M 309.5,173.5 C 324.515,175.204 329.681,183.204 325,197.5C 316.66,206.464 307.993,206.797 299,198.5C 293.761,186.326 297.261,177.993 309.5,173.5 Z"></path></g>
<g><path style="opacity:0.977" fill="#115da7" d="M 251.5,176.5 C 264.743,178.319 268.577,185.319 263,197.5C 258.063,201.722 252.563,202.556 246.5,200C 240.836,194.221 240.003,187.721 244,180.5C 246.255,178.501 248.755,177.168 251.5,176.5 Z"></path></g>
<g><path style="opacity:0.979" fill="#115da7" d="M 193.5,179.5 C 202.014,179.843 205.514,184.176 204,192.5C 200.608,198.467 195.774,199.967 189.5,197C 183.393,189.359 184.726,183.526 193.5,179.5 Z"></path></g>
<g><path style="opacity:0.986" fill="#115da8" d="M 279.5,217.5 C 295.842,218.846 301.009,227.179 295,242.5C 288.738,248.93 281.571,250.097 273.5,246C 265.865,237.977 265.532,229.644 272.5,221C 274.925,219.787 277.259,218.621 279.5,217.5 Z"></path></g>
<g><path style="opacity:0.984" fill="#115da8" d="M 338.5,217.5 C 354.01,218.859 359.177,226.859 354,241.5C 347.206,249.367 339.372,250.534 330.5,245C 323.355,236.022 324.021,227.689 332.5,220C 334.611,219.155 336.611,218.322 338.5,217.5 Z"></path></g>
<g><path style="opacity:0.978" fill="#115da8" d="M 221.5,220.5 C 235.399,221.694 239.566,228.694 234,241.5C 229.063,245.722 223.563,246.556 217.5,244C 210.133,237.27 209.8,230.27 216.5,223C 218.315,222.243 219.981,221.41 221.5,220.5 Z"></path></g>
<g><path style="opacity:0.972" fill="#115da7" d="M 163.5,223.5 C 173.416,223.998 176.916,228.998 174,238.5C 170.95,242.13 167.117,243.297 162.5,242C 157.268,239.367 155.435,235.201 157,229.5C 158.436,226.558 160.603,224.558 163.5,223.5 Z"></path></g>
<g><path style="opacity:0.954" fill="#115da8" d="M 120.5,227.5 C 127.985,228.805 129.319,232.305 124.5,238C 119.201,239.033 116.701,236.866 117,231.5C 117.69,229.65 118.856,228.316 120.5,227.5 Z"></path></g>
<g><path style="opacity:0.988" fill="#125ea7" d="M 250.5,263.5 C 259.603,263.04 265.603,267.04 268.5,275.5C 287.491,276.333 306.491,276.833 325.5,277C 335.621,290.077 345.621,303.244 355.5,316.5C 387.161,317.333 418.828,317.833 450.5,318C 447.021,320.312 444.021,323.146 441.5,326.5C 422.167,327.167 402.833,327.833 383.5,328.5C 376.216,343.569 368.549,358.402 360.5,373C 349.167,373.333 337.833,373.667 326.5,374C 320.674,384.827 312.341,387.16 301.5,381C 294.833,373 294.833,365 301.5,357C 311.418,351.052 319.418,352.885 325.5,362.5C 335.149,363.665 344.816,363.832 354.5,363C 360.167,351.333 365.833,339.667 371.5,328C 327.168,327.5 282.835,327.333 238.5,327.5C 237.347,333.484 233.681,336.984 227.5,338C 216.473,338.976 210.14,333.976 208.5,323C 212.123,308.232 220.79,304.232 234.5,311C 235.956,312.745 237.289,314.578 238.5,316.5C 273.167,317.833 307.833,317.833 342.5,316.5C 334.641,306.475 326.975,296.308 319.5,286C 302.167,285.333 284.833,285.333 267.5,286C 261.664,294.696 253.998,296.696 244.5,292C 238.885,287.032 237.052,280.865 239,273.5C 241.194,268.171 245.027,264.838 250.5,263.5 Z"></path></g>
<g><path style="opacity:0.984" fill="#115da7" d="M 192.5,266.5 C 204.877,267.256 209.377,273.59 206,285.5C 199.297,293.032 192.297,293.365 185,286.5C 180.72,277.164 183.22,270.498 192.5,266.5 Z"></path></g>
<g><path style="opacity:0.97" fill="#115da7" d="M 134.5,269.5 C 145.122,270.41 148.288,275.744 144,285.5C 137.597,290.157 132.263,289.157 128,282.5C 126.493,276.179 128.66,271.846 134.5,269.5 Z"></path></g>
<g><path style="opacity:0.944" fill="#115ea7" d="M 91.5,273.5 C 96.757,273.688 98.9237,276.355 98,281.5C 94.6667,285.5 91.3333,285.5 88,281.5C 87.2793,277.946 88.4459,275.28 91.5,273.5 Z"></path></g>
<g><path style="opacity:0.987" fill="#115da7" d="M 162.5,310.5 C 176.24,310.988 180.74,317.654 176,330.5C 171.347,335.547 165.847,336.714 159.5,334C 153.593,329.339 152.093,323.505 155,316.5C 157.114,313.879 159.614,311.879 162.5,310.5 Z"></path></g>
<g><path style="opacity:0.975" fill="#115da7" d="M 119.5,313.5 C 128.478,313.31 132.311,317.643 131,326.5C 127.608,332.467 122.774,333.967 116.5,331C 110.632,323.851 111.632,318.018 119.5,313.5 Z"></path></g>
<g><path style="opacity:0.937" fill="#115ea8" d="M 76.5,317.5 C 82.1573,317.324 84.324,319.991 83,325.5C 80.4192,329.057 77.4192,329.39 74,326.5C 72.7795,322.718 73.6128,319.718 76.5,317.5 Z"></path></g>
<g><path style="opacity:0.989" fill="#115da7" d="M 191.5,356.5 C 202.649,356.148 207.816,361.481 207,372.5C 202.842,381.442 196.342,383.608 187.5,379C 180.147,369.931 181.481,362.431 191.5,356.5 Z"></path></g>
<g><path style="opacity:0.979" fill="#115da8" d="M 250.5,356.5 C 264.364,357.547 268.53,364.547 263,377.5C 254.916,383.583 247.916,382.583 242,374.5C 239.819,365.868 242.652,359.868 250.5,356.5 Z"></path></g>
<g><path style="opacity:0.974" fill="#115da7" d="M 133.5,359.5 C 140.768,358.79 145.101,361.956 146.5,369C 145.411,376.695 141.078,379.695 133.5,378C 128.268,375.367 126.435,371.201 128,365.5C 129.36,362.977 131.193,360.977 133.5,359.5 Z"></path></g>
<g><path style="opacity:1" fill="#125da7" d="M 91.5,363.5 C 98.6033,364.867 99.9366,368.367 95.5,374C 90.2005,375.033 87.7005,372.866 88,367.5C 88.6897,365.65 89.8564,364.316 91.5,363.5 Z"></path></g>
<g><path style="opacity:0.987" fill="#115da8" d="M 336.5,395.5 C 351.845,395.213 358.012,402.546 355,417.5C 350.185,425.415 343.352,427.915 334.5,425C 324.228,417.764 322.894,409.098 330.5,399C 332.432,397.541 334.432,396.375 336.5,395.5 Z"></path></g>
<g><path style="opacity:0.982" fill="#115da8" d="M 278.5,398.5 C 293.566,398.623 298.066,405.623 292,419.5C 283.602,425.484 276.602,424.15 271,415.5C 269.202,407.775 271.702,402.108 278.5,398.5 Z"></path></g>
<g><path style="opacity:0.974" fill="#115da8" d="M 220.5,401.5 C 229.987,400.819 234.154,405.153 233,414.5C 228.754,421.015 223.421,422.015 217,417.5C 213.126,411 214.293,405.666 220.5,401.5 Z"></path></g>
<g><path style="opacity:0.955" fill="#115da7" d="M 162.5,403.5 C 168.766,402.117 172.433,404.45 173.5,410.5C 172.592,416.959 168.926,419.459 162.5,418C 157.235,413.076 157.235,408.242 162.5,403.5 Z"></path></g>
<g><path style="opacity:0.932" fill="#115da8" d="M 119.5,405.5 C 125.665,404.829 128.165,407.496 127,413.5C 122.301,417.824 118.801,416.99 116.5,411C 117.124,408.915 118.124,407.082 119.5,405.5 Z"></path></g>
<g><path style="opacity:0.985" fill="#115da7" d="M 307.5,441.5 C 318.989,440.493 325.656,445.66 327.5,457C 324.306,470.263 316.306,474.596 303.5,470C 294.975,462.275 294.308,453.941 301.5,445C 303.432,443.541 305.432,442.375 307.5,441.5 Z"></path></g>
<g><path style="opacity:0.98" fill="#115da8" d="M 249.5,444.5 C 261.816,443.649 266.983,449.316 265,461.5C 259.398,470.15 252.398,471.484 244,465.5C 239.205,456.505 241.038,449.505 249.5,444.5 Z"></path></g>
<g><path style="opacity:0.976" fill="#115da8" d="M 191.5,445.5 C 202.379,445.204 206.212,450.204 203,460.5C 196.113,466.193 190.446,465.193 186,457.5C 185.056,452.146 186.889,448.146 191.5,445.5 Z"></path></g>

<!-- LETRAS "ach" PRINCIPALES -->
<!-- Letra "a" -->
<g><path style="opacity:0.987" fill="#115da7" d="M 460.5,249.5 C 485.169,249.333 509.836,249.5 534.5,250C 552.523,254.868 561.857,266.701 562.5,285.5C 556.86,319.2 551.027,352.866 545,386.5C 544.813,390.039 543.646,393.205 541.5,396C 513.587,397.649 485.587,397.983 457.5,397C 435.127,389.439 426.294,373.939 431,350.5C 437.816,329.348 451.983,316.181 473.5,311C 496.894,311.152 520.061,310.318 543,308.5C 544.36,301.532 545.527,294.532 546.5,287.5C 545.66,275.302 539.327,267.802 527.5,265C 504.833,264.667 482.167,264.333 459.5,264C 455.326,258.882 455.66,254.049 460.5,249.5 Z M 475.5,325.5 C 496.833,325.5 518.167,325.5 539.5,325.5C 536.608,344.516 533.608,363.516 530.5,382.5C 509.164,382.667 487.831,382.5 466.5,382C 448.174,377.187 442.007,365.687 448,347.5C 453.846,335.802 463.013,328.468 475.5,325.5 Z"></path></g>

<!-- Letra "c" -->
<g><path style="opacity:0.982" fill="#115da7" d="M 616.5,249.5 C 642.502,249.333 668.502,249.5 694.5,250C 698.393,252.693 699.226,256.193 697,260.5C 695.786,262.049 694.286,263.215 692.5,264C 668.5,264.333 644.5,264.667 620.5,265C 604.244,268.035 594.077,277.535 590,293.5C 586.113,315.324 582.279,337.158 578.5,359C 579.188,371.396 585.521,379.063 597.5,382C 622.167,382.333 646.833,382.667 671.5,383C 675.618,387.88 675.284,392.547 670.5,397C 660.403,398.13 650.236,398.63 640,398.5C 623.488,398.4 606.988,397.9 590.5,397C 572.705,392.196 563.371,380.529 562.5,362C 566.537,334.611 571.704,307.445 578,280.5C 586.248,264.414 599.081,254.081 616.5,249.5 Z"></path></g>

<!-- Letra "h" -->
<g><path style="opacity:0.987" fill="#115da7" d="M 725.5,186.5 C 731.992,184.723 735.659,187.056 736.5,193.5C 732.45,214.801 728.95,236.135 726,257.5C 731.422,254.039 737.255,251.539 743.5,250C 761.5,249.333 779.5,249.333 797.5,250C 811.631,253.464 820.465,262.298 824,276.5C 824.667,282.167 824.667,287.833 824,293.5C 818.215,326.875 812.215,360.208 806,393.5C 802.692,397.327 798.526,398.494 793.5,397C 791.556,395.278 790.556,393.111 790.5,390.5C 796.5,356.167 802.5,321.833 808.5,287.5C 807.382,276.217 801.382,269.051 790.5,266C 775.5,265.333 760.5,265.333 745.5,266C 730.923,269.578 722.09,278.744 719,293.5C 713.322,326.569 707.322,359.569 701,392.5C 698.103,397.155 693.937,398.655 688.5,397C 687.299,396.097 686.465,394.931 686,393.5C 696.626,325.699 708.292,258.032 721,190.5C 722.397,188.93 723.897,187.596 725.5,186.5 Z"></path></g>


<!-- Texto "COLOMBIA" (usando paths vectoriales exactos del original) -->
<g><path style="opacity:0.914" fill="#115da7" d="M 419.5,432.5 C 425.021,432.054 430.355,432.554 435.5,434C 435.043,434.414 434.709,434.914 434.5,435.5C 430.204,436.328 425.871,436.828 421.5,437C 420.667,437.833 419.833,438.667 419,439.5C 417.838,444.125 417.504,448.792 418,453.5C 422.08,454.3 426.247,454.8 430.5,455C 431.833,456 431.833,457 430.5,458C 425.5,458.667 420.5,458.667 415.5,458C 414.667,457.167 413.833,456.333 413,455.5C 412.571,449.401 413.237,443.401 415,437.5C 416.025,435.313 417.525,433.646 419.5,432.5 Z"></path></g>
<g><path style="opacity:0.912" fill="#115da7" d="M 471.5,432.5 C 476.179,432.334 480.845,432.501 485.5,433C 487.066,434.684 488.066,436.684 488.5,439C 487.614,443.151 486.78,447.318 486,451.5C 485.31,454.196 483.81,456.363 481.5,458C 476.833,458.667 472.167,458.667 467.5,458C 466.667,457.167 465.833,456.333 465,455.5C 464.571,449.401 465.237,443.401 467,437.5C 468.025,435.313 469.525,433.646 471.5,432.5 Z M 473.5,436.5 C 476.187,436.336 478.854,436.503 481.5,437C 482.578,437.674 483.245,438.674 483.5,440C 482.667,444.167 481.833,448.333 481,452.5C 477.488,454.648 473.821,454.981 470,453.5C 469.034,447.264 470.201,441.598 473.5,436.5 Z"></path></g>
<g><path style="opacity:0.907" fill="#115da7" d="M 522.5,432.5 C 523.833,432.5 525.167,432.5 526.5,432.5C 525.934,439.896 524.934,447.229 523.5,454.5C 527.846,454.334 532.179,454.501 536.5,455C 537.641,455.741 537.641,456.575 536.5,457.5C 530.537,458.496 524.537,458.829 518.5,458.5C 519.617,449.798 520.95,441.132 522.5,432.5 Z"></path></g>
<g><path style="opacity:0.912" fill="#115da7" d="M 575.5,432.5 C 580.179,432.334 584.845,432.501 589.5,433C 591.066,434.684 592.066,436.684 592.5,439C 591.614,443.151 590.78,447.318 590,451.5C 589.31,454.196 587.81,456.363 585.5,458C 580.833,458.667 576.167,458.667 571.5,458C 570.667,457.167 569.833,456.333 569,455.5C 568.571,449.401 569.237,443.401 571,437.5C 572.025,435.313 573.525,433.646 575.5,432.5 Z M 577.5,436.5 C 580.187,436.336 582.854,436.503 585.5,437C 586.578,437.674 587.245,438.674 587.5,440C 586.667,444.167 585.833,448.333 585,452.5C 581.488,454.648 577.821,454.981 574,453.5C 573.034,447.264 574.201,441.598 577.5,436.5 Z"></path></g>
<g><path style="opacity:0.893" fill="#115da7" d="M 626.5,432.5 C 628.144,432.286 629.644,432.62 631,433.5C 632.473,437.779 634.473,441.779 637,445.5C 640.5,441.333 644,437.167 647.5,433C 648.784,432.316 649.951,432.483 651,433.5C 649.897,441.449 648.564,449.449 647,457.5C 645.644,458.38 644.144,458.714 642.5,458.5C 643.336,453.831 643.836,449.164 644,444.5C 641.715,446.907 639.549,449.407 637.5,452C 636.056,452.781 634.723,452.614 633.5,451.5C 632.236,448.875 631.069,446.208 630,443.5C 628.574,448.052 627.574,452.719 627,457.5C 625.644,458.38 624.144,458.714 622.5,458.5C 623.617,449.797 624.951,441.131 626.5,432.5 Z"></path></g>
<g><path style="opacity:0.913" fill="#115da7" d="M 685.5,432.5 C 691.176,432.334 696.843,432.501 702.5,433C 706.339,437.388 706.339,441.888 702.5,446.5C 704.168,451.339 702.835,455.172 698.5,458C 692.843,458.499 687.176,458.666 681.5,458.5C 682.617,449.797 683.951,441.131 685.5,432.5 Z M 689.5,436.5 C 692.85,436.335 696.183,436.502 699.5,437C 700.935,439.267 700.602,441.267 698.5,443C 695.183,443.498 691.85,443.665 688.5,443.5C 688.674,441.139 689.007,438.806 689.5,436.5 Z M 687.5,448.5 C 691.167,448.5 694.833,448.5 698.5,448.5C 698.822,450.722 698.155,452.556 696.5,454C 693.183,454.498 689.85,454.665 686.5,454.5C 686.833,452.5 687.167,450.5 687.5,448.5 Z"></path></g>
<g><path style="opacity:0.892" fill="#115da7" d="M 740.5,432.5 C 742.346,432.222 743.68,432.889 744.5,434.5C 742.81,442.116 741.31,449.782 740,457.5C 738.644,458.38 737.144,458.714 735.5,458.5C 736.525,449.677 738.192,441.011 740.5,432.5 Z"></path></g>
<g><path style="opacity:0.918" fill="#115da7" d="M 781.5,432.5 C 785.846,432.334 790.179,432.501 794.5,433C 795.701,433.903 796.535,435.069 797,436.5C 796.552,443.526 795.552,450.526 794,457.5C 792.644,458.38 791.144,458.714 789.5,458.5C 789.963,455.518 790.296,452.518 790.5,449.5C 786.774,449.177 783.107,449.511 779.5,450.5C 778.787,452.776 778.287,455.109 778,457.5C 776.644,458.38 775.144,458.714 773.5,458.5C 774.233,451.435 775.4,444.435 777,437.5C 778.059,435.341 779.559,433.674 781.5,432.5 Z M 783.5,436.5 C 786.249,436.274 788.916,436.607 791.5,437.5C 792.641,439.421 792.808,441.421 792,443.5C 788.27,444.46 784.437,444.793 780.5,444.5C 780.394,441.385 781.394,438.719 783.5,436.5 Z"></path></g>

<!-- Separador "/" (path exacto del original) -->
<g><path style="opacity:0.868" fill="#a4a7aa" d="M 888.5,191.5 C 890.167,191.5 891.833,191.5 893.5,191.5 C 877.725,279.817 862.058,368.15 846.5,456.5 C 844.473,456.662 842.473,456.495 840.5,456 C 856.816,367.92 872.816,279.753 888.5,191.5 Z"></path></g>

<!-- Texto "El Motor de las Transacciones Electrónicas" (paths vectoriales exactos del original) -->
<g><path style="opacity:0.79" fill="#969696" d="M 933.5,282.5 C 940.167,282.5 946.833,282.5 953.5,282.5C 953.5,283.5 953.5,284.5 953.5,285.5C 947.491,285.334 941.491,285.501 935.5,286C 930.286,288.419 927.953,292.586 928.5,298.5C 935.175,298.334 941.842,298.5 948.5,299C 949.833,300 949.833,301 948.5,302C 941.508,302.5 934.508,302.666 927.5,302.5C 925.527,307.206 926.194,311.372 929.5,315C 935.491,315.499 941.491,315.666 947.5,315.5C 947.5,316.5 947.5,317.5 947.5,318.5C 940.492,318.666 933.492,318.5 926.5,318C 924.951,316.786 923.785,315.286 923,313.5C 923.123,304.217 924.79,295.217 928,286.5C 929.812,285.023 931.645,283.69 933.5,282.5 Z"></path></g>
<g><path style="opacity:0.757" fill="#969696" d="M 958.5,283.5 C 959.5,283.5 960.5,283.5 961.5,283.5C 959.5,295.168 957.5,306.834 955.5,318.5C 954.5,318.5 953.5,318.5 952.5,318.5C 953.986,306.736 955.986,295.069 958.5,283.5 Z"></path></g>
<g><path style="opacity:0.763" fill="#969696" d="M 979.5,283.5 C 980.822,283.33 981.989,283.663 983,284.5C 985.91,291.319 989.077,297.985 992.5,304.5C 997.523,298.645 1002.36,292.645 1007,286.5C 1008.26,284.393 1010.1,283.393 1012.5,283.5C 1010.99,294.873 1009.16,306.207 1007,317.5C 1005.99,318.337 1004.82,318.67 1003.5,318.5C 1005.13,309.858 1006.3,301.192 1007,292.5C 1002.37,298.967 997.198,304.967 991.5,310.5C 988.11,304.724 984.943,298.724 982,292.5C 979.914,300.333 978.247,308.333 977,316.5C 976.29,317.973 975.124,318.64 973.5,318.5C 975.177,306.769 977.177,295.103 979.5,283.5 Z"></path></g>
<g><path style="opacity:0.792" fill="#969696" d="M 1132.5,283.5 C 1133.5,283.5 1134.5,283.5 1135.5,283.5C 1133.99,293.55 1132.16,303.55 1130,313.5C 1127.65,317.84 1123.98,319.507 1119,318.5C 1114.88,319.326 1111.88,317.992 1110,314.5C 1110.11,309.476 1110.78,304.476 1112,299.5C 1112.77,297.061 1114.27,295.227 1116.5,294C 1121.09,293.201 1125.59,293.368 1130,294.5C 1130.84,290.792 1131.67,287.125 1132.5,283.5 Z M 1118.5,296.5 C 1121.52,296.335 1124.52,296.502 1127.5,297C 1128.57,297.739 1129.24,298.739 1129.5,300C 1128.61,304.151 1127.78,308.318 1127,312.5C 1126.17,313.333 1125.33,314.167 1124.5,315C 1120.91,315.789 1117.41,315.622 1114,314.5C 1113.58,310.131 1113.91,305.797 1115,301.5C 1115.26,299.093 1116.42,297.427 1118.5,296.5 Z"></path></g>
<g><path style="opacity:0.757" fill="#969696" d="M 1176.5,283.5 C 1177.5,283.5 1178.5,283.5 1179.5,283.5C 1177.5,295.168 1175.5,306.834 1173.5,318.5C 1172.5,318.5 1171.5,318.5 1170.5,318.5C 1171.99,306.736 1173.99,295.069 1176.5,283.5 Z"></path></g>
<g><path style="opacity:0.787" fill="#969696" d="M 1045.5,287.5 C 1046.5,287.5 1047.5,287.5 1048.5,287.5C 1048.74,289.467 1048.41,291.301 1047.5,293C 1056.58,294.033 1056.58,295.533 1047.5,297.5C 1046.45,302.313 1045.45,307.147 1044.5,312C 1045.43,314.909 1047.43,316.075 1050.5,315.5C 1050.5,316.5 1050.5,317.5 1050.5,318.5C 1044.89,319.709 1041.89,317.543 1041.5,312C 1042.07,306.877 1043.07,301.877 1044.5,297C 1042.87,296.506 1041.2,296.34 1039.5,296.5C 1039.5,295.5 1039.5,294.5 1039.5,293.5C 1041.17,293.5 1042.83,293.5 1044.5,293.5C 1044.83,291.5 1045.17,289.5 1045.5,287.5 Z"></path></g>
<g><path style="opacity:0.785" fill="#969696" d="M 1019.5,293.5 C 1024.18,293.334 1028.85,293.501 1033.5,294C 1034.7,294.903 1035.53,296.069 1036,297.5C 1035.99,302.874 1035.33,308.208 1034,313.5C 1033.05,315.57 1031.55,317.07 1029.5,318C 1024.83,318.667 1020.17,318.667 1015.5,318C 1014.3,317.097 1013.47,315.931 1013,314.5C 1013.11,309.476 1013.78,304.476 1015,299.5C 1015.98,297.032 1017.48,295.032 1019.5,293.5 Z M 1020.5,296.5 C 1024.18,296.335 1027.85,296.501 1031.5,297C 1032.17,298 1032.83,299 1033.5,300C 1032.51,303.759 1031.68,307.593 1031,311.5C 1030.53,312.931 1029.7,314.097 1028.5,315C 1024.58,315.793 1020.74,315.626 1017,314.5C 1016.13,308.019 1017.3,302.019 1020.5,296.5 Z"></path></g>
<g><path style="opacity:0.785" fill="#969696" d="M 1061.5,293.5 C 1066.18,293.334 1070.85,293.501 1075.5,294C 1076.7,294.903 1077.53,296.069 1078,297.5C 1077.99,302.874 1077.33,308.208 1076,313.5C 1075.05,315.57 1073.55,317.07 1071.5,318C 1066.83,318.667 1062.17,318.667 1057.5,318C 1056.3,317.097 1055.47,315.931 1055,314.5C 1055.11,309.476 1055.78,304.476 1057,299.5C 1057.98,297.032 1059.48,295.032 1061.5,293.5 Z M 1062.5,296.5 C 1066.18,296.335 1069.85,296.501 1073.5,297C 1074.17,298 1074.83,299 1075.5,300C 1074.51,303.759 1073.68,307.593 1073,311.5C 1072.53,312.931 1071.7,314.097 1070.5,315C 1066.58,315.793 1062.74,315.626 1059,314.5C 1058.13,308.019 1059.3,302.019 1062.5,296.5 Z"></path></g>
<g><path style="opacity:0.769" fill="#969696" d="M 1087.5,293.5 C 1091.17,293.5 1094.83,293.5 1098.5,293.5C 1098.5,294.5 1098.5,295.5 1098.5,296.5C 1094.42,296.043 1090.58,296.71 1087,298.5C 1085.35,304.741 1084.01,311.074 1083,317.5C 1081.99,318.337 1080.82,318.67 1079.5,318.5C 1080.66,312.18 1081.83,305.846 1083,299.5C 1084.33,297.34 1085.83,295.34 1087.5,293.5 Z"></path></g>
<g><path style="opacity:0.845" fill="#969696" d="M 1141.5,293.5 C 1146.23,293.223 1150.9,293.557 1155.5,294.5C 1156.19,295.025 1156.69,295.692 1157,296.5C 1157.67,299.5 1157.67,302.5 1157,305.5C 1151.13,307.43 1144.96,308.097 1138.5,307.5C 1138.23,310.119 1138.56,312.619 1139.5,315C 1144.49,315.499 1149.49,315.666 1154.5,315.5C 1154.5,316.5 1154.5,317.5 1154.5,318.5C 1148.82,318.666 1143.16,318.499 1137.5,318C 1135.85,316.53 1134.85,314.697 1134.5,312.5C 1135.33,308.168 1136.17,303.835 1137,299.5C 1137.98,297.032 1139.48,295.032 1141.5,293.5 Z M 1142.5,296.5 C 1145.85,296.335 1149.18,296.502 1152.5,297C 1154.4,298.808 1154.9,300.975 1154,303.5C 1149.26,304.469 1144.43,304.803 1139.5,304.5C 1139.39,301.385 1140.39,298.719 1142.5,296.5 Z"></path></g>
<g><path style="opacity:0.826" fill="#969696" d="M 1184.5,293.5 C 1189.51,293.334 1194.51,293.501 1199.5,294C 1201.3,295.594 1202.3,297.594 1202.5,300C 1201.12,306.115 1200.12,312.281 1199.5,318.5C 1193.82,318.666 1188.16,318.499 1182.5,318C 1178.53,313.467 1178.87,309.133 1183.5,305C 1188.4,303.675 1193.4,303.175 1198.5,303.5C 1198.33,302.178 1198.66,301.011 1199.5,300C 1198.83,299 1198.17,298 1197.5,297C 1193.18,296.501 1188.85,296.334 1184.5,296.5C 1184.5,295.5 1184.5,294.5 1184.5,293.5 Z M 1187.5,306.5 C 1190.83,306.5 1194.17,306.5 1197.5,306.5C 1197.3,309.518 1196.96,312.518 1196.5,315.5C 1192.49,315.666 1188.49,315.499 1184.5,315C 1182.7,311.142 1183.7,308.309 1187.5,306.5 Z"></path></g>
<g><path style="opacity:0.834" fill="#969696" d="M 1210.5,293.5 C 1215.83,293.5 1221.17,293.5 1226.5,293.5C 1226.5,294.5 1226.5,295.5 1226.5,296.5C 1221.82,296.334 1217.15,296.501 1212.5,297C 1208.65,299.488 1208.65,301.821 1212.5,304C 1215.83,304.333 1219.17,304.667 1222.5,305C 1226.29,308.847 1226.29,312.847 1222.5,317C 1216.25,318.749 1209.92,318.915 1203.5,317.5C 1203.71,316.914 1204.04,316.414 1204.5,316C 1209.5,315.667 1214.5,315.333 1219.5,315C 1222.48,312.809 1222.82,310.476 1220.5,308C 1216.83,307.667 1213.17,307.333 1209.5,307C 1205.35,302.209 1205.68,297.709 1210.5,293.5 Z"></path></g>
<g><path style="opacity:0.823" fill="#969696" d="M 916.5,342.5 C 926.522,342.168 936.522,342.501 946.5,343.5C 946.291,344.086 945.957,344.586 945.5,345C 941.179,345.499 936.846,345.666 932.5,345.5C 931.05,356.199 929.383,366.866 927.5,377.5C 925.897,377.688 924.563,377.188 923.5,376C 925.55,366.204 927.55,356.371 929.5,346.5C 925.217,345.508 920.884,345.174 916.5,345.5C 916.5,344.5 916.5,343.5 916.5,342.5 Z"></path></g>
<g><path style="opacity:0.769" fill="#969696" d="M 946.5,352.5 C 950.167,352.5 953.833,352.5 957.5,352.5C 957.5,353.5 957.5,354.5 957.5,355.5C 953.416,355.043 949.583,355.71 946,357.5C 944.348,363.741 943.014,370.074 942,376.5C 940.989,377.337 939.822,377.67 938.5,377.5C 939.665,371.18 940.831,364.846 942,358.5C 943.332,356.34 944.832,354.34 946.5,352.5 Z"></path></g>
<g><path style="opacity:0.826" fill="#969696" d="M 962.5,352.5 C 967.511,352.334 972.511,352.501 977.5,353C 979.297,354.594 980.297,356.594 980.5,359C 979.12,365.115 978.12,371.281 977.5,377.5C 971.824,377.666 966.157,377.499 960.5,377C 956.534,372.467 956.868,368.133 961.5,364C 966.401,362.675 971.401,362.175 976.5,362.5C 976.33,361.178 976.663,360.011 977.5,359C 976.833,358 976.167,357 975.5,356C 971.179,355.501 966.846,355.334 962.5,355.5C 962.5,354.5 962.5,353.5 962.5,352.5 Z M 965.5,365.5 C 968.833,365.5 972.167,365.5 975.5,365.5C 975.296,368.518 974.963,371.518 974.5,374.5C 970.486,374.666 966.486,374.499 962.5,374C 960.702,370.142 961.702,367.309 965.5,365.5 Z"></path></g>
<g><path style="opacity:0.765" fill="#969696" d="M 989.5,352.5 C 993.846,352.334 998.179,352.501 1002.5,353C 1004.3,354.594 1005.3,356.594 1005.5,359C 1004.12,365.115 1003.12,371.281 1002.5,377.5C 1001.5,377.5 1000.5,377.5 999.5,377.5C 999.797,371.189 1000.8,365.023 1002.5,359C 1001.18,356.039 998.849,354.872 995.5,355.5C 992.989,355.288 990.822,355.955 989,357.5C 987.287,363.729 985.954,370.062 985,376.5C 983.989,377.337 982.822,377.67 981.5,377.5C 982.665,371.18 983.831,364.846 985,358.5C 985.804,355.854 987.304,353.854 989.5,352.5 Z"></path></g>
<g><path style="opacity:0.834" fill="#969696" d="M 1013.5,352.5 C 1018.83,352.5 1024.17,352.5 1029.5,352.5C 1029.5,353.5 1029.5,354.5 1029.5,355.5C 1024.82,355.334 1020.15,355.501 1015.5,356C 1011.65,358.488 1011.65,360.821 1015.5,363C 1018.83,363.333 1022.17,363.667 1025.5,364C 1029.29,367.847 1029.29,371.847 1025.5,376C 1019.25,377.749 1012.92,377.915 1006.5,376.5C 1006.71,375.914 1007.04,375.414 1007.5,375C 1012.5,374.667 1017.5,374.333 1022.5,374C 1025.48,371.809 1025.82,369.476 1023.5,367C 1019.83,366.667 1016.17,366.333 1012.5,366C 1008.35,361.209 1008.68,356.709 1013.5,352.5 Z"></path></g>
<g><path style="opacity:0.68" fill="#969696" d="M 1110.5,344.5 C 1111.5,344.5 1112.5,344.5 1113.5,344.5C 1113.83,347.5 1112.5,348.833 1109.5,348.5C 1109.43,347.041 1109.77,345.708 1110.5,344.5 Z"></path></g>
<!-- Paths adicionales para completar "Transacciones" -->
<g><path style="opacity:0.845" fill="#969696" d="M 1171.5,352.5 C 1176.23,352.223 1180.9,352.557 1185.5,353.5C 1186.19,354.025 1186.69,354.692 1187,355.5C 1187.67,358.5 1187.67,361.5 1187,364.5C 1181.13,366.43 1174.96,367.097 1168.5,366.5C 1168.23,369.119 1168.56,371.619 1169.5,374C 1174.49,374.499 1179.49,374.666 1184.5,374.5C 1184.5,375.5 1184.5,376.5 1184.5,377.5C 1178.82,377.666 1173.16,377.499 1167.5,377C 1165.85,375.53 1164.85,373.697 1164.5,371.5C 1165.33,367.168 1166.17,362.835 1167,358.5C 1167.98,356.032 1169.48,354.032 1171.5,352.5 Z M 1172.5,355.5 C 1175.85,355.335 1179.18,355.502 1182.5,356C 1184.4,357.808 1184.9,359.975 1184,362.5C 1179.26,363.469 1174.43,363.803 1169.5,363.5C 1169.39,360.385 1170.39,357.719 1172.5,355.5 Z"></path></g>
<g><path style="opacity:0.834" fill="#969696" d="M 1195.5,352.5 C 1200.83,352.5 1206.17,352.5 1211.5,352.5C 1211.5,353.5 1211.5,354.5 1211.5,355.5C 1206.82,355.334 1202.15,355.501 1197.5,356C 1193.65,358.488 1193.65,360.821 1197.5,363C 1200.83,363.333 1204.17,363.667 1207.5,364C 1211.29,367.847 1211.29,371.847 1207.5,376C 1201.25,377.749 1194.92,377.915 1188.5,376.5C 1188.71,375.914 1189.04,375.414 1189.5,375C 1194.5,374.667 1199.5,374.333 1204.5,374C 1207.48,371.809 1207.82,369.476 1205.5,367C 1201.83,366.667 1198.17,366.333 1194.5,366C 1190.35,361.209 1190.68,356.709 1195.5,352.5 Z"></path></g>
<g><path style="opacity:0.826" fill="#969696" d="M 1036.5,352.5 C 1041.51,352.334 1046.51,352.501 1051.5,353C 1053.3,354.594 1054.3,356.594 1054.5,359C 1053.12,365.115 1052.12,371.281 1051.5,377.5C 1045.82,377.666 1040.16,377.499 1034.5,377C 1030.53,372.467 1030.87,368.133 1035.5,364C 1040.4,362.675 1045.4,362.175 1050.5,362.5C 1050.33,361.178 1050.66,360.011 1051.5,359C 1050.83,358 1050.17,357 1049.5,356C 1045.18,355.501 1040.85,355.334 1036.5,355.5C 1036.5,354.5 1036.5,353.5 1036.5,352.5 Z M 1039.5,365.5 C 1042.83,365.5 1046.17,365.5 1049.5,365.5C 1049.3,368.518 1048.96,371.518 1048.5,374.5C 1044.49,374.666 1040.49,374.499 1036.5,374C 1034.7,370.142 1035.7,367.309 1039.5,365.5 Z"></path></g>
<g><path style="opacity:0.819" fill="#969696" d="M 1063.5,352.5 C 1068.83,352.5 1074.17,352.5 1079.5,352.5C 1079.5,353.5 1079.5,354.5 1079.5,355.5C 1074.04,355.103 1068.71,355.603 1063.5,357C 1061.85,361.562 1060.52,366.229 1059.5,371C 1060.17,372 1060.83,373 1061.5,374C 1066.68,374.054 1071.68,374.721 1076.5,376C 1058.64,382.135 1052.8,376.302 1059,358.5C 1059.98,356.032 1061.48,354.032 1063.5,352.5 Z"></path></g>
<g><path style="opacity:0.819" fill="#969696" d="M 1087.5,352.5 C 1092.83,352.5 1098.17,352.5 1103.5,352.5C 1103.5,353.5 1103.5,354.5 1103.5,355.5C 1098.04,355.103 1092.71,355.603 1087.5,357C 1085.85,361.562 1084.52,366.229 1083.5,371C 1084.17,372 1084.83,373 1085.5,374C 1090.68,374.054 1095.68,374.721 1100.5,376C 1082.64,382.135 1076.8,376.302 1083,358.5C 1083.98,356.032 1085.48,354.032 1087.5,352.5 Z"></path></g>
<g><path style="opacity:0.74" fill="#969696" d="M 1108.5,352.5 C 1109.5,352.5 1110.5,352.5 1111.5,352.5C 1110.49,360.889 1109.16,369.222 1107.5,377.5C 1106.5,377.5 1105.5,377.5 1104.5,377.5C 1105.73,369.148 1107.06,360.815 1108.5,352.5 Z"></path></g>
<g><path style="opacity:0.785" fill="#969696" d="M 1120.5,352.5 C 1125.18,352.334 1129.85,352.501 1134.5,353C 1135.7,353.903 1136.53,355.069 1137,356.5C 1136.99,361.874 1136.33,367.208 1135,372.5C 1134.05,374.57 1132.55,376.07 1130.5,377C 1125.83,377.667 1121.17,377.667 1116.5,377C 1115.3,376.097 1114.47,374.931 1114,373.5C 1114.11,368.476 1114.78,363.476 1116,358.5C 1116.98,356.032 1118.48,354.032 1120.5,352.5 Z M 1121.5,355.5 C 1125.18,355.335 1128.85,355.501 1132.5,356C 1133.17,357 1133.83,358 1134.5,359C 1133.51,362.759 1132.68,366.593 1132,370.5C 1131.53,371.931 1130.7,373.097 1129.5,374C 1125.58,374.793 1121.74,374.626 1118,373.5C 1117.13,367.019 1118.3,361.019 1121.5,355.5 Z"></path></g>
<g><path style="opacity:0.765" fill="#969696" d="M 1146.5,352.5 C 1150.85,352.334 1155.18,352.501 1159.5,353C 1161.3,354.594 1162.3,356.594 1162.5,359C 1161.12,365.115 1160.12,371.281 1159.5,377.5C 1158.5,377.5 1157.5,377.5 1156.5,377.5C 1156.8,371.189 1157.8,365.023 1159.5,359C 1158.18,356.039 1155.85,354.872 1152.5,355.5C 1149.99,355.288 1147.82,355.955 1146,357.5C 1144.29,363.729 1142.95,370.062 1142,376.5C 1140.99,377.337 1139.82,377.67 1138.5,377.5C 1139.66,371.18 1140.83,364.846 1142,358.5C 1142.8,355.854 1144.3,353.854 1146.5,352.5 Z"></path></g>
<g><path style="opacity:0.79" fill="#969696" d="M 913.5,401.5 C 920.167,401.5 926.833,401.5 933.5,401.5C 933.5,402.5 933.5,403.5 933.5,404.5C 927.491,404.334 921.491,404.501 915.5,405C 910.286,407.419 907.953,411.586 908.5,417.5C 915.175,417.334 921.842,417.5 928.5,418C 929.833,419 929.833,420 928.5,421C 921.508,421.5 914.508,421.666 907.5,421.5C 905.527,426.206 906.194,430.372 909.5,434C 915.491,434.499 921.491,434.666 927.5,434.5C 927.5,435.5 927.5,436.5 927.5,437.5C 920.492,437.666 913.492,437.5 906.5,437C 904.951,435.786 903.785,434.286 903,432.5C 903.123,423.217 904.79,414.217 908,405.5C 909.812,404.023 911.645,402.69 913.5,401.5 Z"></path></g>
<g><path style="opacity:0.757" fill="#969696" d="M 938.5,402.5 C 939.5,402.5 940.5,402.5 941.5,402.5C 939.5,414.168 937.5,425.834 935.5,437.5C 934.5,437.5 933.5,437.5 932.5,437.5C 933.986,425.736 935.986,414.069 938.5,402.5 Z"></path></g>
<g><path style="opacity:0.787" fill="#969696" d="M 997.5,406.5 C 998.5,406.5 999.5,406.5 1000.5,406.5C 1000.74,408.467 1000.41,410.301 999.5,412C 1008.58,413.033 1008.58,414.533 999.5,416.5C 998.447,421.313 997.447,426.147 996.5,431C 997.429,433.909 999.429,435.075 1002.5,434.5C 1002.5,435.5 1002.5,436.5 1002.5,437.5C 996.886,438.709 993.886,436.543 993.5,431C 994.075,425.877 995.075,420.877 996.5,416C 994.866,415.506 993.199,415.34 991.5,415.5C 991.5,414.5 991.5,413.5 991.5,412.5C 993.167,412.5 994.833,412.5 996.5,412.5C 996.833,410.5 997.167,408.5 997.5,406.5 Z"></path></g>
<g><path style="opacity:0.845" fill="#969696" d="M 947.5,412.5 C 952.233,412.223 956.9,412.557 961.5,413.5C 962.192,414.025 962.692,414.692 963,415.5C 963.667,418.5 963.667,421.5 963,424.5C 957.126,426.43 950.96,427.097 944.5,426.5C 944.232,429.119 944.565,431.619 945.5,434C 950.489,434.499 955.489,434.666 960.5,434.5C 960.5,435.5 960.5,436.5 960.5,437.5C 954.824,437.666 949.157,437.499 943.5,437C 941.848,435.53 940.848,433.697 940.5,431.5C 941.333,427.168 942.166,422.835 943,418.5C 943.979,416.032 945.479,414.032 947.5,412.5 Z M 948.5,415.5 C 951.85,415.335 955.183,415.502 958.5,416C 960.396,417.808 960.896,419.975 960,422.5C 955.263,423.469 950.43,423.803 945.5,423.5C 945.394,420.385 946.394,417.719 948.5,415.5 Z"></path></g>
<g><path style="opacity:0.819" fill="#969696" d="M 972.5,412.5 C 977.833,412.5 983.167,412.5 988.5,412.5C 988.5,413.5 988.5,414.5 988.5,415.5C 983.041,415.103 977.708,415.603 972.5,417C 970.849,421.562 969.516,426.229 968.5,431C 969.167,432 969.833,433 970.5,434C 975.679,434.054 980.679,434.721 985.5,436C 967.635,442.135 961.802,436.302 968,418.5C 968.979,416.032 970.479,414.032 972.5,412.5 Z"></path></g>
<g><path style="opacity:0.769" fill="#969696" d="M 1012.5,412.5 C 1016.17,412.5 1019.83,412.5 1023.5,412.5C 1023.5,413.5 1023.5,414.5 1023.5,415.5C 1019.42,415.043 1015.58,415.71 1012,417.5C 1010.35,423.741 1009.01,430.074 1008,436.5C 1006.99,437.337 1005.82,437.67 1004.5,437.5C 1005.66,431.18 1006.83,424.846 1008,418.5C 1009.33,416.34 1010.83,414.34 1012.5,412.5 Z"></path></g>
<g><path style="opacity:0.785" fill="#969696" d="M 1030.5,412.5 C 1035.18,412.334 1039.85,412.501 1044.5,413C 1045.7,413.903 1046.53,415.069 1047,416.5C 1046.99,421.874 1046.33,427.208 1045,432.5C 1044.05,434.57 1042.55,436.07 1040.5,437C 1035.83,437.667 1031.17,437.667 1026.5,437C 1025.3,436.097 1024.47,434.931 1024,433.5C 1024.11,428.476 1024.78,423.476 1026,418.5C 1026.98,416.032 1028.48,414.032 1030.5,412.5 Z M 1031.5,415.5 C 1035.18,415.335 1038.85,415.501 1042.5,416C 1043.17,417 1043.83,418 1044.5,419C 1043.51,422.759 1042.68,426.593 1042,430.5C 1041.53,431.931 1040.7,433.097 1039.5,434C 1035.58,434.793 1031.74,434.626 1028,433.5C 1027.13,427.019 1028.3,421.019 1031.5,415.5 Z"></path></g>
<g><path style="opacity:0.765" fill="#969696" d="M 1056.5,412.5 C 1060.85,412.334 1065.18,412.501 1069.5,413C 1071.3,414.594 1072.3,416.594 1072.5,419C 1071.12,425.115 1070.12,431.281 1069.5,437.5C 1068.5,437.5 1067.5,437.5 1066.5,437.5C 1066.8,431.189 1067.8,425.023 1069.5,419C 1068.18,416.039 1065.85,414.872 1062.5,415.5C 1059.99,415.288 1057.82,415.955 1056,417.5C 1054.29,423.729 1052.95,430.062 1052,436.5C 1050.99,437.337 1049.82,437.67 1048.5,437.5C 1049.66,431.18 1050.83,424.846 1052,418.5C 1052.8,415.854 1054.3,413.854 1056.5,412.5 Z"></path></g>
<g><path style="opacity:0.74" fill="#969696" d="M 1078.5,412.5 C 1079.5,412.5 1080.5,412.5 1081.5,412.5C 1080.49,420.889 1079.16,429.222 1077.5,437.5C 1076.5,437.5 1075.5,437.5 1074.5,437.5C 1075.73,429.148 1077.06,420.815 1078.5,412.5 Z"></path></g>
<g><path style="opacity:0.819" fill="#969696" d="M 1090.5,412.5 C 1095.83,412.5 1101.17,412.5 1106.5,412.5C 1106.5,413.5 1106.5,414.5 1106.5,415.5C 1101.04,415.103 1095.71,415.603 1090.5,417C 1088.85,421.562 1087.52,426.229 1086.5,431C 1087.17,432 1087.83,433 1088.5,434C 1093.68,434.054 1098.68,434.721 1103.5,436C 1085.64,442.135 1079.8,436.302 1086,418.5C 1086.98,416.032 1088.48,414.032 1090.5,412.5 Z"></path></g>
<g><path style="opacity:0.826" fill="#969696" d="M 1111.5,412.5 C 1116.51,412.334 1121.51,412.501 1126.5,413C 1128.3,414.594 1129.3,416.594 1129.5,419C 1128.12,425.115 1127.12,431.281 1126.5,437.5C 1120.82,437.666 1115.16,437.499 1109.5,437C 1105.53,432.467 1105.87,428.133 1110.5,424C 1115.4,422.675 1120.4,422.175 1125.5,422.5C 1125.33,421.178 1125.66,420.011 1126.5,419C 1125.83,418 1125.17,417 1124.5,416C 1120.18,415.501 1115.85,415.334 1111.5,415.5C 1111.5,414.5 1111.5,413.5 1111.5,412.5 Z M 1114.5,425.5 C 1117.83,425.5 1121.17,425.5 1124.5,425.5C 1124.3,428.518 1123.96,431.518 1123.5,434.5C 1119.49,434.666 1115.49,434.499 1111.5,434C 1109.7,430.142 1110.7,427.309 1114.5,425.5 Z"></path></g>
<g><path style="opacity:0.834" fill="#969696" d="M 1137.5,412.5 C 1142.83,412.5 1148.17,412.5 1153.5,412.5C 1153.5,413.5 1153.5,414.5 1153.5,415.5C 1148.82,415.334 1144.15,415.501 1139.5,416C 1135.65,418.488 1135.65,420.821 1139.5,423C 1142.83,423.333 1146.17,423.667 1149.5,424C 1153.29,427.847 1153.29,431.847 1149.5,436C 1143.25,437.749 1136.92,437.915 1130.5,436.5C 1130.71,435.914 1131.04,435.414 1131.5,435C 1136.5,434.667 1141.5,434.333 1146.5,434C 1149.48,431.809 1149.82,429.476 1147.5,427C 1143.83,426.667 1140.17,426.333 1136.5,426C 1132.35,421.209 1132.68,416.709 1137.5,412.5 Z"></path></g>
<!-- Tilde para la ó en Electrónicas -->
<g><path style="opacity:0.68" fill="#969696" d="M 1080.5,404.5 C 1081.5,404.5 1082.5,404.5 1083.5,404.5C 1083.83,407.5 1082.5,408.833 1079.5,408.5C 1079.43,407.041 1079.77,405.708 1080.5,404.5 Z"></path></g>

</svg>`;
}

// =============================================================================
// GENERAR CONTENIDO DE EVIDENCIAS (OPTIMIZADO)
// =============================================================================
function generarContenidoEvidencias() {
  // Usar tipoChecklistActual en lugar de checklistItems
  const checklistActual = window.tipoChecklistActual || window.checklistItems;
  if (!checklistActual || !Array.isArray(checklistActual)) {
    console.warn('checklistActual no está definido como array válido');
    return `
      <div style="text-align: center; padding: 40px; color: #666;">
        <h3>No se encontraron evidencias para mostrar</h3>
        <p>Asegúrate de completar el checklist antes de generar el PDF.</p>
        <p style="font-size: 12px; color: #999;">Debug: checklistActual = ${typeof checklistActual}</p>
      </div>
    `;
  }

  // Obtener información de la empresa una sola vez
  const empresaInfo = obtenerInfoEmpresa();
  const camposEstado = window.camposEstado || {};

  // Función optimizada para determinar si un item está completado
  const isItemCompleted = (item) => {
    const aprobacionState = camposEstado[`aprobado_${item.id}`];
    const evidencias = camposEstado[`evidencias_${item.id}`] || camposEstado[`observaciones_${item.id}`];
    return aprobacionState && evidencias && evidencias.trim() !== '';
  };

  // Pre-calcular todas las estadísticas de una vez
  const evidenciasData = checklistActual.map((item, index) => {
    const itemCompleted = isItemCompleted(item);
    const aprobacionState = camposEstado[`aprobado_${item.id}`] || '';
    const evidencias = camposEstado[`evidencias_${item.id}`] || camposEstado[`observaciones_${item.id}`] || '';
    
    return {
      numero: index + 1,
      titulo: item.texto || item.text || 'Evidencia sin título',
      descripcion: item.esperado || item.description || '',
      evidencias: evidencias.trim(),
      completado: itemCompleted,
      aprobacionState,
      statusColor: itemCompleted ? '#28a745' : '#ffc107',
      statusText: itemCompleted ? 'Completado' : 'Pendiente',
      colorAprobacion: aprobacionState === 'Aprobado' ? '#28a745' : 
                      aprobacionState === 'No aprobado' ? '#dc3545' : '#6c757d'
    };
  });

  // Calcular estadísticas
  const totalItems = evidenciasData.length;
  const completedItems = evidenciasData.filter(data => data.completado).length;
  const pendingItems = totalItems - completedItems;
  const completionPercentage = totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0;

  // Inicializar contenido
  let contenido = `
    <div class="resumen-certificacion" style="
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 25px;
      border-left: 4px solid #115da8;
    ">
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
          <h3 style="color: #115da8; margin: 0 0 10px 0;">📊 Resumen de Certificación</h3>
          <p style="margin: 0; color: #666; font-size: 13px;">
            <strong>Empresa:</strong> ${empresaInfo.nombre}<br>
            <strong>NIT:</strong> ${empresaInfo.nit}<br>
            <strong>Tipo de Certificación:</strong> ${empresaInfo.tipoVinculacion}
          </p>
        </div>
        <div style="text-align: center; color: #115da8;">
          <div style="
            color: #115da8;
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 5px;
          ">Estado</div>
          <div style="font-size: 32px; font-weight: bold; margin-bottom: 5px;">${completionPercentage}%</div>
          <div style="font-size: 12px;">${completedItems}/${totalItems} completadas</div>
        </div>
      </div>
    </div>
  `;

  // Lista detallada de evidencias con CSS mejorado para paginación
  contenido += `
    <div class="lista-evidencias" style="
      page-break-before: auto;
      orphans: 2;
      widows: 2;
    ">
      <h3 style="color: #115da8; margin-bottom: 20px; page-break-after: avoid;">📝 Detalle de Evidencias</h3>
  `;

  // Generar HTML optimizado usando los datos pre-calculados
  const evidenciasHTML = evidenciasData.map(data => {
    const colorAprobacion = data.aprobacionState === 'Aprobado' ? '#28a745' : 
                           data.aprobacionState === 'No aprobado' ? '#dc3545' : '#6c757d';
    const estadoAprobacion = data.aprobacionState ? 
      `<span style="font-size: 11px; color: ${colorAprobacion}; font-weight: bold;">[${data.aprobacionState}]</span>` : '';

    return `
      <div class="evidencia-item" style="
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        margin-bottom: 15px;
        padding: 15px;
        background: ${data.completado ? '#f8fff8' : '#fffef8'};
        page-break-inside: avoid;
        break-inside: avoid;
        display: block;
      ">
        <div style="display: flex; align-items: center; margin-bottom: 10px;">
          <div style="
            color: #333;
            font-weight: bold;
            font-size: 16px;
            margin-right: 12px;
            min-width: 20px;
          ">${data.numero}.</div>
          <div style="flex-grow: 1;">
            <h4 style="margin: 0; color: #333;">${data.titulo}</h4>
            <div style="font-size: 12px; color: ${data.statusColor}; font-weight: bold;">${data.statusText} ${estadoAprobacion}</div>
          </div>
        </div>
        
        ${data.descripcion ? `
          <div style="
            background: white;
            padding: 10px;
            border-radius: 4px;
            border-left: 3px solid ${data.statusColor};
            margin-top: 10px;
            font-size: 13px;
            color: #666;
          ">
            <strong>Qué se espera:</strong> ${data.descripcion}
          </div>
        ` : ''}
        
        ${data.evidencias ? `
          <div style="
            background: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            margin-top: 10px;
            font-size: 13px;
          ">
            <strong>Evidencias:</strong><br><br>${data.evidencias}
          </div>
        ` : ''}
      </div>
    `;
  }).join('');

  contenido += evidenciasHTML;

  contenido += `
      </div>
    </div>
  `;

  return contenido;
}

// =============================================================================
// OBTENER INFORMACIÓN DE LA EMPRESA
// =============================================================================
function obtenerInfoEmpresa() {
  let empresaInfo;
  let tipoCertificacion = 'Comercio';
  
  try {
    // Debug: Ver qué datos tenemos disponibles
    console.log('Datos disponibles para empresa:');
    console.log('window.clienteActual:', window.clienteActual);
    console.log('window.camposEstado:', window.camposEstado);
    
    // Determinar el tipo de certificación desde ventana actual  
    if (window.tipoChecklistActual && Array.isArray(window.tipoChecklistActual)) {
      const numItems = window.tipoChecklistActual.length;
      // Detectar tipo específico basado en contenido y cantidad
      const itemTexts = window.tipoChecklistActual.map(item => 
        (item.titulo || item.text || '').toLowerCase()
      ).join(' ');
      
      if (itemTexts.includes('empresarial')) {
        tipoCertificacion = 'PSE EMPRESARIAL';
      } else if (itemTexts.includes('avanzado')) {
        tipoCertificacion = 'PSE AVANZADO';
      } else if (itemTexts.includes('básico') || itemTexts.includes('basico')) {
        tipoCertificacion = 'PSE BÁSICO';
      } else if (numItems > 10) {
        tipoCertificacion = 'PSE EMPRESARIAL';
      } else {
        tipoCertificacion = 'PSE BÁSICO';
      }
    }
    
    // Primera opción: desde clienteActual
    if (window.clienteActual && typeof window.clienteActual === 'object') {
      console.log('Extrayendo desde clienteActual:', window.clienteActual);
      empresaInfo = {
        nombre: window.clienteActual.name || window.clienteActual.nombre || window.clienteActual.razonSocial || 'Empresa no especificada',
        nit: window.clienteActual.nit || 'NIT no especificado',
        email: window.clienteActual.email || 'Email no especificado',
        telefono: window.clienteActual.telefono || 'Teléfono no especificado',
        tipoVinculacion: tipoCertificacion
      };
      console.log('Info empresa extraída:', empresaInfo);
    } else if (window.camposEstado && typeof window.camposEstado === 'object') {
      empresaInfo = {
        nombre: window.camposEstado['razon-social']?.valor || 
                window.camposEstado['nombre']?.valor || 
                window.camposEstado['empresa']?.valor || 'Empresa no especificada',
        nit: window.camposEstado['nit']?.valor || 'NIT no especificado',  
        email: window.camposEstado['email']?.valor || 'Email no especificado',
        telefono: window.camposEstado['telefono']?.valor || 'Teléfono no especificado',
        tipoVinculacion: tipoCertificacion
      };
    } else {
      // Obtener desde DOM como alternativa más exhaustiva
      console.log('Buscando en DOM...');
      
      const nombreDOM = document.getElementById('razon-social')?.value ||
                        document.getElementById('nombre')?.value ||
                        document.getElementById('empresa')?.value ||
                        document.getElementById('companyName')?.value ||
                        document.querySelector('input[name="razon-social"]')?.value ||
                        document.querySelector('input[name="nombre"]')?.value ||
                        document.querySelector('input[name="company"]')?.value ||
                        document.querySelector('input[name="empresa"]')?.value ||
                        document.querySelector('[data-field="nombre"]')?.value ||
                        document.querySelector('[data-field="razon-social"]')?.value ||
                        document.querySelector('.company-name')?.textContent ||
                        document.querySelector('.empresa-nombre')?.textContent ||
                        'Empresa no especificada';
      
      console.log('Nombre encontrado en DOM:', nombreDOM);
                        
      const nitDOM = document.getElementById('nit')?.value ||
                     document.querySelector('input[name="nit"]')?.value ||
                     'NIT no especificado';
                     
      empresaInfo = {
        nombre: nombreDOM,
        nit: nitDOM,
        email: document.getElementById('email')?.value || 'Email no especificado',
        telefono: document.getElementById('telefono')?.value || 'Teléfono no especificado',
        tipoVinculacion: tipoCertificacion
      };
    }
  } catch (error) {
    console.warn('Error obteniendo datos empresa:', error);
    empresaInfo = {
      nombre: 'Empresa no especificada',
      nit: 'NIT no especificado',
      email: 'Email no especificado',
      telefono: 'Teléfono no especificado',
      tipoVinculacion: 'Comercio'
    };
  }
  
  console.log('Info empresa final:', empresaInfo);
  return empresaInfo;
}

// =============================================================================
// TEMPLATE DEL PDF
// =============================================================================
function createPDFTemplate() {
  const fechaActual = new Date().toLocaleDateString('es-CO', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const empresaInfo = obtenerInfoEmpresa();

  return `
    <div class="pdf-container" style="
      width: 794px;
      min-height: 1123px;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
      background: white;
      color: #333;
    ">
      <!-- Encabezado -->
      <header style="
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding: 20px 0;
        border-bottom: 2px solid #115da8;
      ">
        <div class="col-logo" style="display: flex; align-items: center;">
          ${crearLogoACH_SVG()}
        </div>
        <div style="text-align: center; flex: 1;">
          <h1 style="
            color: #115da8;
            font-size: 28px;
            margin: 0;
            font-weight: bold;
          ">Certificación de Comercios al Servicio PSE</h1>
        </div>
        <div style="text-align: right;">
          <p style="
            color: #115da8;
            font-size: 12px;
            font-weight: bold;
            margin: 0 0 5px 0;
          ">Fecha de Certificación</p>
          <p style="
            color: #666;
            font-size: 12px;
            margin: 0;
          ">${fechaActual}</p>
        </div>
      </header>

      <!-- Contenido -->
      <div class="pdf-content" style="
        font-size: 14px;
        line-height: 1.6;
        color: #444;
      ">
        <div id="contenido-evidencias">
          ${generarContenidoEvidencias()}
        </div>
      </div>
    </div>
  `;
}

// =============================================================================
// FUNCIÓN DE EXPORTACIÓN PRINCIPAL (MEJORADA PARA PAGINACIÓN)
// =============================================================================
async function exportarPDF(titulo = "Reporte de Certificación") {
  try {
    mostrarMensaje('Generando PDF...', 'info');

    // Crear contenido del PDF
    const htmlContent = createPDFTemplate();
    
    // Crear elemento temporal para renderizado
    const tempDiv = document.createElement('div');
    tempDiv.style.position = 'absolute';
    tempDiv.style.top = '-10000px';
    tempDiv.style.left = '0';
    tempDiv.style.width = '794px';
    tempDiv.style.zIndex = '-1';
    tempDiv.innerHTML = htmlContent;
    document.body.appendChild(tempDiv);

    // Esperar a que carguen las imágenes
    await waitForImages(tempDiv);

    // Configuración de html2canvas mejorada para paginación
    const canvas = await html2canvas(tempDiv, {
      scale: 2, // Reducir escala para mejor rendimiento y paginación
      backgroundColor: '#ffffff',
      useCORS: true,
      allowTaint: false,
      foreignObjectRendering: false,
      windowWidth: 800,
      windowHeight: 600, // Aumentar altura para mejor captura
      scrollY: -window.scrollY,
      imageTimeout: 15000,
      logging: false,
      ignoreElements: function(element) {
        return false;
      },
      onclone: function(clonedDoc) {
        console.log('=== ONCLONE EJECUTÁNDOSE ===');
        
        // Copiar variables globales al contexto clonado
        if (clonedDoc.defaultView && window.checklistItems) {
          clonedDoc.defaultView.checklistItems = JSON.parse(JSON.stringify(window.checklistItems));
          console.log('checklistItems copiado:', clonedDoc.defaultView.checklistItems);
        }
        
        if (clonedDoc.defaultView && window.tipoChecklistActual) {
          clonedDoc.defaultView.tipoChecklistActual = JSON.parse(JSON.stringify(window.tipoChecklistActual));
          console.log('tipoChecklistActual copiado:', clonedDoc.defaultView.tipoChecklistActual);
        }
        
        if (clonedDoc.defaultView && window.camposEstado) {
          clonedDoc.defaultView.camposEstado = JSON.parse(JSON.stringify(window.camposEstado));
          console.log('camposEstado copiado:', clonedDoc.defaultView.camposEstado);
        }
        
        // También copiar las funciones necesarias
        if (clonedDoc.defaultView) {
          clonedDoc.defaultView.generarContenidoEvidencias = generarContenidoEvidencias;
          clonedDoc.defaultView.obtenerInfoEmpresa = obtenerInfoEmpresa;
        }
        
        // Configuración específica para SVG del logo
        const svgs = clonedDoc.querySelectorAll('svg');
        svgs.forEach(svg => {
          svg.style.width = '200px';
          svg.style.height = '107px';
          svg.style.display = 'block';
          svg.style.visibility = 'visible';
          svg.style.opacity = '1';
          
          svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
          svg.setAttribute('width', '200');
          svg.setAttribute('height', '107');
          
          const allElements = svg.querySelectorAll('g, path, text, circle, line, rect');
          allElements.forEach(el => {
            el.style.display = 'block';
            el.style.visibility = 'visible';
            if (!el.style.opacity) el.style.opacity = '1';
          });
        });
        
        // Configurar elementos de evidencia para mejor paginación
        const evidenciaItems = clonedDoc.querySelectorAll('.evidencia-item');
        evidenciaItems.forEach(item => {
          item.style.pageBreakInside = 'avoid';
          item.style.breakInside = 'avoid';
          item.style.display = 'block';
        });
        
        // Asegurar que el contenedor del logo sea visible
        const logoContainer = clonedDoc.querySelector('.col-logo');
        if (logoContainer) {
          logoContainer.style.display = 'flex';
          logoContainer.style.visibility = 'visible';
          logoContainer.style.opacity = '1';
        }
      }
    });

    // Crear PDF con paginación inteligente
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF('p', 'pt', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 40;
    const imgWidth = pageWidth - margin * 2;
    
    // Calcular altura de imagen manteniendo aspecto
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    // Si la imagen es más alta que una página, dividir con lógica mejorada
    if (imgHeight > pageHeight - margin * 2) {
      const pageContentHeight = pageHeight - margin * 2;
      const totalPages = Math.ceil(imgHeight / pageContentHeight);
      
      for (let page = 0; page < totalPages; page++) {
        if (page > 0) pdf.addPage();
        
        // Calcular posición con superposición suave para evitar cortes bruscos
        let sourceY = (page * pageContentHeight * canvas.height) / imgHeight;
        let sourceHeight = Math.min(
          (pageContentHeight * canvas.height) / imgHeight,
          canvas.height - sourceY
        );
        
        // Ajuste especial para páginas intermedias - agregar overlap
        if (page > 0 && page < totalPages - 1) {
          const overlap = 20; // 20px de superposición
          sourceY -= overlap;
          sourceHeight += overlap;
        }
        
        // Ajuste para la última página
        if (page === totalPages - 1) {
          sourceHeight = canvas.height - sourceY;
        }
        
        // Crear canvas para esta página
        const pageCanvas = document.createElement('canvas');
        pageCanvas.width = canvas.width;
        pageCanvas.height = sourceHeight;
        
        const ctx = pageCanvas.getContext('2d');
        
        // Configurar renderizado suave
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        
        ctx.drawImage(canvas, 0, sourceY, canvas.width, sourceHeight, 0, 0, canvas.width, sourceHeight);
        
        const imgData = pageCanvas.toDataURL('image/png', 0.95);
        const actualHeight = (sourceHeight * imgWidth) / canvas.width;
        
        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, actualHeight, '', 'FAST');
      }
    } else {
      // Una sola página
      const imgData = canvas.toDataURL('image/png', 0.95);
      pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight, '', 'FAST');
    }

    // Limpiar elementos temporales
    document.body.removeChild(tempDiv);

    // Generar nombre de archivo optimizado
    const empresaInfo = obtenerInfoEmpresa();
    const fecha = new Date().toISOString().split('T')[0];
    const nombreArchivo = `Certificacion_${empresaInfo.tipoVinculacion.replace(/\s+/g, '_')}_${empresaInfo.nit}_${fecha}.pdf`;
    
    // Descargar PDF
    pdf.save(nombreArchivo);

    mostrarMensaje('PDF generado exitosamente', 'success');

  } catch (error) {
    console.error('Error al generar PDF:', error);
    mostrarMensaje('Error al generar el PDF: ' + error.message, 'error');
  }
}

// =============================================================================
// HACER FUNCIÓN DISPONIBLE GLOBALMENTE
// =============================================================================
window.exportarPDF = exportarPDF;
